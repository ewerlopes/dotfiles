(general-define-key
 :keymaps 'global-map
 "<mouse-2>" nil
 "<mouse-3>" nil)

(phundrak/evil
  :packages '(counsel)
  "U"   '(evil-redo :package evil)
  "C-a" #'beginning-of-line
  "C-e" #'end-of-line
  "C-y" #'yank
  "M-y" '(counsel-yank-pop :package counsel))

(general-define-key
 "<f5>" #'compile
 "<f6>" #'recompile)

(phundrak/leader-key
  "SPC" '(counsel-M-x :wk "M-x")
  "'"   '(shell-pop :package shell-pop)
  "R"   #'recompile
  "u"   #'universal-argument

  "TAB " '(:ignore t :wk "tabs" :package )
  "TAB TAB" '(tab-switch :package )
  "TAB »" '(tab-next :package )
  "TAB «" '(tab-previous :package )
  "TAB c" '(tab-new :package )
  "TAB C" '(tab-new-to :package )
  "TAB d" '(tab-close :package )
  "TAB n" '(tab-next :package )
  "TAB p" '(tab-previous :package )
  "TAB r" '(tab-rename :package )
  "a" '(:ignore t :wk "apps")
  "ac" #'calc
  "aC" '(:ignore t :wk "calendar")
  "aCC" #'calendar
  "aCo" '(org-agenda :package org)
  "aCs" '(org-caldav-sync :package org-caldav)
  "ad" '(docker :package docker)
  "aE" '(elfeed :package elfeed)
  "ae" '(:ignore t :wk "email")
  "aec" '(mu4e-compose-new :package mu4e)
  "aem" '(mu4e :package mu4e)
  "ak" '(keycast-mode :package keycast)
  "aK" '(keycast-log-mode :package keycast)
  "am" '(:ignore t :wk "mastodon")
  "amm" '(mastodon :package mastodon)
  "amn" '(mastodon-notifications-get :package mastodon)
  "amt" '(mastodon-toot :package mastodon)
  "aT" #'tetris
  "aS" '(screenshot :package screenshot)
  "aw" '(wttrin :package wttrin)
  "as" '(:ignore t :wk "shells")
  "ase" #'eshell-new
  "ast" '(eat :package eat)
  "at" '(:ignore t :wk "treemacs")
  "atc" '(:ignore t :wk "create")
  "atcd" '(treemacs-create-dir :package treemacs)
  "atcf" '(treemacs-create-file :package treemacs)
  "atci" '(treemacs-create-icon :package treemacs)
  "atct" '(treemacs-create-theme :package treemacs)
  "atcw" '(treemacs-create-workspace :package treemacs)
  "atd" '(treemacs-delete-file :package treemacs)
  "atf" '(:ignore t :wk "files")
  "atff" '(treemacs-find-file :package treemacs)
  "atft" '(treemacs-find-tag :package treemacs)
  "atl" '(:ignore t :wk "lsp")
  "atls" '(treemacs-expand-lsp-symbol :package treemacs)
  "atld" '(treemacs-expand-lsp-treemacs-deps :package treemacs)
  "atlD" '(treemacs-collapse-lsp-treemacs-deps :package treemacs)
  "atlS" '(treemacs-collapse-lsp-symbol :package treemacs)
  "atp" '(:ignore t :wk "projects")
  "atpa" '(treemacs-add-project-to-workspace :package treemacs)
  "atpf" '(treemacs-project-follow-mode :package treemacs)
  "atpn" '(treemacs-project-of-node :package treemacs)
  "atpp" '(treemacs-project-at-point :package treemacs)
  "atpr" '(treemacs-remove-project-from-workspace :package treemacs)
  "atpt" '(treemacs-move-project-down :package treemacs)
  "atps" '(treemacs-move-project-up :package treemacs)
  "atr" '(:ignore t :wk "rename")
  "atrf" '(treemacs-rename-file :package treemacs)
  "atrp" '(treemacs-rename-project :package treemacs)
  "atrr" '(treemacs-rename :package treemacs)
  "atrw" '(treemacs-rename-workspace :package treemacs)
  "att" '(treemacs :package treemacs)
  "atT" '(:ignore t :wk "toggles")
  "atTd" '(treemacs-toggle-show-dotfiles :package treemacs)
  "atTn" '(treemacs-toggle-node :package treemacs)
  "atv" '(:ignore t :wk "visit node")
  "atva" '(treemacs-visit-node-ace :package treemacs)
  "atvc" '(treemacs-visit-node-close-treemacs :package treemacs)
  "atvn" '(treemacs-visit-node-default :package treemacs)
  "aty" '(:ignore t :wk "yank")
  "atya" '(treemacs-copy-absolute-path-at-point :package treemacs)
  "atyp" '(treemacs-copy-project-path-at-point :package treemacs)
  "atyr" '(treemacs-copy-relative-path-at-point :package treemacs)
  "atyf" '(treemacs-copy-file :package treemacs)
  "b" '(:ignore t :wk "buffers")
  "bb" '(bufler-switch-buffer :package bufler)
  "bB" #'bury-buffer
  "bc" #'clone-indirect-buffer
  "bC" #'clone-indirect-buffer-other-window
  "bl" '(bufler :package bufler)
  "bd" #'kill-current-buffer
  "bD" #'kill-buffer
  "bh" '(dashboard-refresh-buffer :package dashboard)
  "bm" #'switch-to-messages-buffer
  "bn" #'next-buffer
  "bp" #'previous-buffer
  "br" '(counsel-buffer-or-recentf :package counsel)
  "bR" #'rename-uniquely
  "bs" #'switch-to-scratch-buffer
  "c" '(:ignore t :wk "code")
  "cl" '(evilnc-comment-or-uncomment-lines :package evil-nerd-commenter)
  "cn" '(hl-todo-next :package hl-todo)
  "cp" '(hl-todo-previous :package hl-todo)
  "e" '(:ignore t :wk "errors")
  "e." '(hydra-flycheck/body :wk "hydra-flycheck")
  "el" '(counsel-flycheck :package counsel)
  "eF" '(flyspell-hydra/body :wk "flyspell-hydra")
  "ee" '(:keymap flycheck-command-map :package 'flycheck :wk "flycheck")
  "ef" '(:keymap flyspell-mode-map :package 'flyspell :wk "flyspell")
  "f" '(:ignore t :wk "files")
  "ff" '(counsel-find-file :package counsel)
  "fF" '(quick-find-files :package quick-find-files)
  "fh" #'hexl-find-file
  "fr" '(counsel-recentf :package counsel)
  "fs" #'save-buffer
  "fc"  '((lambda ()
            (interactive)
            (quick-find-files nil "~/org/config/docs/emacs" "org"))
          :wk "emacs config"
          :package quick-find-files)
  "fC"  '((lambda ()
            (interactive)
            (quick-find-files nil "~/org/config/docs" "org"))
          :wk "general config"
          :package quick-find-files)
  "fi"  '((lambda ()
            (interactive)
            (find-file (concat user-emacs-directory "init.el")))
          :which-key "init.el")
  "fI"  '((lambda ()
            (interactive)
            (quick-find-files nil
                              (expand-file-name "lisp" user-emacs-directory)
                              "el"))
          :which-key "elisp config"
          :package quick-find-files)
  "fR"  '((lambda ()
            (interactive)
            (counsel-find-file ""
                               (concat user-emacs-directory
                                      (file-name-as-directory "straight")
                                      (file-name-as-directory "repos"))))
          :which-key "straight package"
          :package counsel)
  "fS"  '((lambda ()
            (interactive)
            (find-file "~/org/config/stumpwm.org"))
          :which-key "stumpwm.org")
  "g" '(:ignore t :wk "git")
  "gb" '(magit-blame :package magit)
  "gc" '(magit-clone :package magit)
  "gd" '(magit-dispatch :package magit)
  "gi" '(magit-init :package magit)
  "gs" '(magit-status :package magit)
  "gl" '(magit-log :package magit)
  "gy" '(my/yadm :package magit)
  "gS" '(magit-stage-file :package magit)
  "gU" '(magit-unstage-file :package magit)
  "gf" '(:ignore t :wk "file")
  "gfd" '(magit-diff :package magit)
  "gfc" '(magit-file-checkout :package magit)
  "gfl" '(magit-file-dispatch :package magit)
  "gfF" '(magit-find-file :package magit)
  "h" '(:ignore t :wk "help" :package )
  "hk" '(which-key-show-top-level :wk "which-key" :package )
  "hi" '(info :package )
  "hI" '(info-display-manual :package )
  "hd" '(:ignore t :wk "describe" :package )
  "hdc" '(describe-char :package )
  "hdC" '(helpful-command :package )
  "hdf" '(helpful-callable :package )
  "hdi" '(describe-input-method :package )
  "hdk" '(helpful-key :package )
  "hdm" '(helpful-macro :package )
  "hdM" '(helpful-mode :package )
  "hdp" '(describe-package :package )
  "hds" '(helpful-symbol :package )
  "hdv" '(helpful-variable :package )
  "i" '(:ignore t :wk "insert")
  "iu" '(counsel-unicode-char :package counsel)
  "iy" '(ivy-yasnippet :package yasnippet)
  "j" '(:ignore t :wk "jump")
  "jC" '(:ignore t :wk "avy copy")
  "jCl" '(avy-copy-line :package avy)
  "jCr" '(avy-copy-region :package avy)
  "jD" #'dired-jump-other-window
  "jU" '(my/avy-open-url :wk "open-url" :package avy)
  "jb" '(avy-pop-mark :package avy)
  "jc" '(evil-avy-goto-char-timer :package avy)
  "jd" '(dirvish-dwim :package dirvish)
  "jf" '(counsel-file-jump :package counsel)
  "jk" '(:ignore t :wk "avy kill")
  "jkL" '(avy-kill-ring-save-whole-line :package avy)
  "jkR" '(avy-kill-ring-save-region :package avy)
  "jkl" '(avy-kill-whole-line :package avy)
  "jkr" '(avy-kill-region :package avy)
  "jl" '(avy-goto-line :package avy)
  "jm" '(:ignore t :wk "move")
  "jml" '(avy-move-line :package avy)
  "jmr" '(avy-move-region :package avy)
  "jmt" '(avy-transpose-lines-in-region :package avy)
  "jn" '(avy-next :package avy)
  "jp" '(avy-prev :package avy)
  "ju" '(my/avy-goto-url :wk "goto-url" :package avy)
  "l" '(:ignore t :wk "language")
  "lB" '(langtool-correct-buffer :package langtool)
  "lb" '(langtool-check-buffer :package langtool)
  "lc" '(langtool-check :package langtool)
  "lC" '(langtool-correct-at-point :package langtool)
  "ld" '(langtool-check-done :package langtool)
  "ll" '(langtool-switch-default-language :package langtool)
  "lp" '(langtool-show-message-at-point :package langtool)
  "lr" '(langtool-correct-region :package langtool)
  "m" '(:ignore t :wk "media")
  "m." '(hydra-media/body :wk "hydra-media" :package emms)
  "m«" '(emms-player-mpd-previous :package emms)
  "m»" '(emms-player-mpd-next :package emms)
  "mc" '(emms-player-mpd-clear :package emms)
  "me" '(:ignore t :wk "emms")
  "meb" '(emms-browser :package emms)
  "mep" '(emms-playlist-mode-go :package emms)
  "mes" '(emms-player-mpd-show :package emms)
  "mp" '(my/mpc-toggle :wk "mpd-play-pause")
  "ms" '(emms-stop :package emms)
  "mu" '(:ignore t :wk "update")
  "mum" '(emms-player-mpd-update-all :package emms)
  "muc" '(emms-cache-set-from-mpd-all :package emm s)
  "o" '(:ignore t :wk "org")
  "oc" '(org-capture :package org)
  "or" '(:ignore t :wk "roam")
  "orb" '(org-mark-ring-goto :wk "back" :package org-roam)
  "orB" '(org-roam-buffer-toggle :package org-roam)
  "orn" '(:ignore t :wk "nodes")
  "ornf" '(org-roam-node-find :package org-roam)
  "orni" '(org-roam-node-insert :package org-roam)
  "orno" '(org-roam-node-open :package org-roam)
  "ornr" '(org-roam-node-random :package org-roam)
  "ornv" '(org-roam-node-visit :package org-roam)
  "ors" '(:ignore t :wk "sync")
  "orsa" '(org-roam-db-autosync-mode :package org-roam)
  "orsc" '(org-roam-db-clear-all :package org-roam)
  "orsd" '(org-roam-db-diagnose-node :package org-roam)
  "orss" '(org-roam-db-sync :package org-roam)
  "oru" '(:ignore t :wk "ui")
  "orua" '(org-roam-ui-add-to-local-graph :package org-roam)
  "oruo" '(org-roam-ui-open :package org-roam)
  "r" '(:ignore t :wk "refactor")
  "ri" '(evil-iedit-state/iedit-mode :wk "iedit-mode" :package evil-iedit-state)
  "rq" '(evil-iedit-state/quit-iedit-mode :wk "quit-iedit-mode" :package evil-iedit-state)
  "t " '(:ignore t :wk "toggles" :package )
  "t TAB" '(tab-bar-mode :package )
  "t t" '(my/modify-frame-alpha-background/body :package )
  "t T" '(counsel-load-theme :package )
  "t d" '(:ignore t :wk "debug" :package )
  "t de" '(toggle-debug-on-error :package )
  "t dq" '(toggle-debug-on-quit :package )
  "t i" '(:ignore t :wk "input method" :package )
  "t it" '(toggle-input-method :package )
  "t is" '(set-input-method :package )
  "T" '(:ignore t :wk "text")
  "Te" '(string-edit-at-point :package string-edit-at-point)
  "Tu" #'downcase-region
  "TU" #'upcase-region
  "Tz" #'hydra-zoom/body
  "w" '(:ignore t :wk "windows")
  "wc" '(evil-window-left :package evil)
  "wt" '(evil-window-down :package evil)
  "ws" '(evil-window-up :package evil)
  "wr" '(evil-window-right :package evil)
  "w." #'windows-adjust-size/body
  "w-" #'split-window-below-and-focus
  "w/" #'split-window-right-and-focus
  "w$" '(winum-select-window-by-number :package winum)
  "w0" '(winum-select-window-0-or-10 :wk "none" :package winum)
  "w1" '(winum-select-window-1 :wk "none" :package winum)
  "w2" '(winum-select-window-2 :wk "none" :package winum)
  "w3" '(winum-select-window-3 :wk "none" :package winum)
  "w4" '(winum-select-window-4 :wk "none" :package winum)
  "w5" '(winum-select-window-5 :wk "none" :package winum)
  "w6" '(winum-select-window-6 :wk "none" :package winum)
  "w7" '(winum-select-window-7 :wk "none" :package winum)
  "w8" '(winum-select-window-8 :wk "none" :package winum)
  "w9" '(winum-select-window-9 :wk "none" :package winum)
  "wb" #'kill-buffer-and-window
  "wd" #'delete-window
  "wo" #'other-window
  "wD" #'delete-other-windows
  "ww" '(:ignore t :wk "writeroom")
  "ww." '(writeroom-buffer-width/body :package writeroom-mode)
  "www" '(writeroom-mode :package writeroom-mode)
  "q" '(:ignore t :wk "quit" :package )
  "qf" '(delete-frame :package )
  "qq" '(save-buffers-kill-terminal :package )
  "qQ" '(kill-emacs :package ))

(defhydra hydra-flycheck
  (:pre (flycheck-list-errors)
   :post (quit-windows-on "*Flycheck errors*")
   :hint nil)
  ("f" flycheck-error-list-set-filter "Filter")
  ("t" flycheck-next-error "Next")
  ("s" flycheck-previous-error "Previous")
  ("gg" flycheck-first-error "First")
  ("G" (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
  ("q" nil))
